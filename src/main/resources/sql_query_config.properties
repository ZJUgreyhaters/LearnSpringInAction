#\u6807\u51C6\u666E\u901A\u5B57\u6BB5\u6620\u5C04
sel.db.standard.common=\u6807\u51C6\u5C42\u6B21:standardLevel,\u6807\u51C6\u7F16\u53F7:standardId,\
           \u6807\u51C6\u4E3B\u9898:domainName,\u4E00\u7EA7\u5206\u7C7B:one,\u4E8C\u7EA7\u5206\u7C7B:two,\u4E09\u7EA7\u5206\u7C7B:three,\u4E2D\u6587\u540D\u79F0:entityDesc,\
           \u6307\u6807\u7C7B\u578B:entityType,\u82F1\u6587\u540D\u79F0:entityName,\u5E38\u7528\u540D\u79F0:entityAlias,\u4E1A\u52A1\u5B9A\u4E49:businessDefinition,\
           \u4E1A\u52A1\u53E3\u5F84:businessRule,\u5E38\u7528\u7EF4\u5EA6:logicType,\u7EDF\u8BA1\u9891\u7387:frequency,\u5236\u5B9A\u4F9D\u636E:according,\
           \u76D1\u7BA1\u6807\u5FD7:supervision,\u5EA6\u91CF\u5355\u4F4D:dataUnit,\u6570\u636E\u7C7B\u578B:dataCategory,\u53D6\u503C\u8303\u56F4:dataArea,\
           \u6570\u636E\u7C7B\u522B:dataType,\u843D\u5730\u7CFB\u7EDF:systemUsed,\u6280\u672F\u53E3\u5F84:techniqueRule,\u6765\u6E90\u7CFB\u7EDF:systemFrom,\
          \u6E90\u7CFB\u7EDF\u6280\u672F\u53E3\u5F84:oralTechniqueRule,\u7BA1\u7406\u90E8\u95E8:controlDept,\u6807\u51C6\u72B6\u6001:entityStatus,\
          \u53D1\u5E03\u65F6\u95F4:effectiveTime,\u5931\u6548\u65E5\u671F:offlineTime,\u5907\u6CE8:remark,\u6570\u636E\u957F\u5EA6:dataType,\
          \u6570\u636E\u7CBE\u5EA6:dataPrecision,\u6570\u636E\u683C\u5F0F:dataPattern,\u516C\u5171\u4EE3\u7801\u4E3B\u9898:udcRuleName,\u5F15\u7528\u4EE3\u7801:udcCode,\
          \u6821\u9A8C\u89C4\u5219:checkingRule,\u534F\u529E\u90E8\u95E8:coSector,\u5B9A\u4E49\u539F\u5219:defPrinciple,\
          \u7F16\u7801\u89C4\u5219:udcPrinciple,\u7F16\u7801\u957F\u5EA6:dataType,\u751F\u6548\u65E5\u671F:effectiveTime,\
          \u4E3B\u7BA1\u90E8\u95E8:controlDept,\u53D1\u5E03\u72B6\u6001:entityStatus
#\u6307\u6807\u6807\u51C6\u6620\u5C04\u5B57\u6BB5\u6620\u5C04
sel.db.standard.mapping=\u6807\u51C6\u7F16\u53F7:standardId,\u6807\u51C6\u4E3B\u9898:domainName,\u4E00\u7EA7\u5206\u7C7B:one,\
                         \u4E8C\u7EA7\u5206\u7C7B:two,\u4E09\u7EA7\u5206\u7C7B:three,\u6807\u51C6\u540D\u79F0:20,\u4E1A\u52A1\u7EBF:businessTypeName,\u4E3B\u9898:22,\
                         \u4E2D\u6587\u540D\u79F0:entityDesc,\u903B\u8F91\u8868\u540D\u79F0:logicTableName,\
                         \u6307\u6807\u7F16\u53F7:entityId,\u82F1\u6587\u540D\u79F0:entityName
#\u6307\u6807\u666E\u901A\u5B57\u6BB5\u6620\u5C04
sel.db.target.common=\u4E1A\u52A1\u7EBF:businessTypeName,\u4E2D\u6587\u540D\u79F0:entityDesc,\
           \u6307\u6807\u7C7B\u578B:entityType,\u82F1\u6587\u540D\u79F0:entityName,\u5E38\u7528\u540D\u79F0:entityAlias,\u4E1A\u52A1\u5B9A\u4E49:businessDefinition,\
           \u4E1A\u52A1\u53E3\u5F84:businessRule,\u5E38\u7528\u7EF4\u5EA6:logicType,\u7EDF\u8BA1\u9891\u7387:frequency,\u5236\u5B9A\u4F9D\u636E:according,\
           \u76D1\u7BA1\u6807\u5FD7:supervision,\u5EA6\u91CF\u5355\u4F4D:dataUnit,\u6570\u636E\u7C7B\u578B:dataCategory,\u53D6\u503C\u8303\u56F4:dataArea,\
           \u6570\u636E\u7C7B\u522B:dataType,\u843D\u5730\u7CFB\u7EDF:systemUsed,\u6280\u672F\u53E3\u5F84:techniqueRule,\u6765\u6E90\u7CFB\u7EDF:systemFrom,\
          \u6E90\u7CFB\u7EDF\u6280\u672F\u53E3\u5F84:oralTechniqueRule,\u7BA1\u7406\u90E8\u95E8:controlDept,\
          \u53D1\u5E03\u65F6\u95F4:effectiveTime,\u5931\u6548\u65E5\u671F:offlineTime,\u5907\u6CE8:remark,\u6570\u636E\u957F\u5EA6:dataType,\
          \u6570\u636E\u7CBE\u5EA6:dataPrecision,\u6570\u636E\u683C\u5F0F:dataPattern,\u516C\u5171\u4EE3\u7801\u4E3B\u9898:udcRuleName,\u5F15\u7528\u4EE3\u7801:udcCode,\
          \u6821\u9A8C\u89C4\u5219:checkingRule,\u534F\u529E\u90E8\u95E8:coSector,\u5B9A\u4E49\u539F\u5219:defPrinciple,\
          \u7F16\u7801\u89C4\u5219:udcPrinciple,\u7F16\u7801\u957F\u5EA6:dataType,\u751F\u6548\u65E5\u671F:effectiveTime,\
          \u4E3B\u7BA1\u90E8\u95E8:controlDept,\u53D1\u5E03\u72B6\u6001:entityStatus,\
          \u4E3B\u9898:domainName,\u903B\u8F91\u8868\u540D\u79F0:logicTableName,\u6307\u6807\u7F16\u53F7:entityId
#\u5B57\u6BB5\u6307\u6807\u6620\u5C04\u5B57\u6BB5\u6620\u5C04
sel.db.target.mapping=\u4E1A\u52A1\u7EBF:businessTypeName,\u4E3B\u9898:domainName,\u903B\u8F91\u8868\u540D\u79F0:logicTableName,\
                        \u6307\u6807\u7F16\u53F7:entityId,\u4E2D\u6587\u540D\u79F0:entityDesc,\u82F1\u6587\u540D\u79F0:entityName,\
                        \u6570\u636E\u6E90:26,\u6570\u636E\u8868:physicalTable,\u6570\u636E\u5B57\u6BB5:physicalField
#\u5BA2\u7FA4\u5DE6\u4FA7\u7EF4\u5EA6\u914D\u7F6E
sel.ids='BQ0001','BQ0002','BQ0003','BQ0006','BQ0007'
#\u5BA2\u7FA4\u5DE6\u4FA7\u7EF4\u5EA6\u5355\u4E2A\u672F\u8BED\u8BF7\u6C42\u5730\u5740
restTemplate.url=http://192.168.2.61:8082/quantchiAPI/term/{EntityId}
#sql\u62FC\u63A5\u5934\u90E8
sel.sql.top=\
  select {0} condition01.customer_no,\
  cust.customer_name,\
  round(nvl(main_data.fin_balance/10000,0),2) as fin_balance,\
  round(nvl(main_data.total_asset/10000,0),2) as total_asset,\
  round(nvl(main_data.assure_debit_rate,0)*100,2) as assure_debit_rate,\
  round(nvl(main_data.concentrate,0)*100,2) as concentrate,0 as profit_rate_y from ( 
#sql\u62FC\u63A5\u5C3E\u90E8
sel.sql.bottom=\
  left join mtoi.dim_customer cust on condition01.customer_no=cust.customer_no \
  left join \
  (select * from mtoi.agg_cust_statistics where part_date = 20160101) \
  main_data on condition01.customer_no=main_data.customer_no 
#\u6DFB\u52A0sql
sel.insert.sql.top=\
  insert overwrite table mtoi.cust_group_detail \
  partition (part_group_id = ''{0}'',PART_DATE = 20160103) \
  select ''{0}'' as part_group_id, ''20160101'' as init_date,condition01.customer_no,\
  ''Customer Group Service'' as audit_date,\
  from_unixtime(unix_timestamp(),''yyyy-MM-dd HH:mm:ss'') as audit_time from ( 
#\u67E5\u8BE2\u5BA2\u7FA4\u4EBA\u6570sql
sel.sel.sql=\
  select ''{0}'' as part_group_id, ''20160101'' as init_date,condition01.customer_no,\
  ''Customer Group Service'' as audit_date,\
  from_unixtime(unix_timestamp(),''yyyy-MM-dd HH:mm:ss'') as audit_time from ( 
#\u5BA2\u7FA4\u5BA2\u6237\u8BE6\u60C5\u5217\u8868\u5C55\u793A
sel.hive.customer.customer.groupId=\
 select \
condition01.customer_no, \
cust.customer_name, \
round(nvl(main_data.fin_balance/10000,0),2) as fin_balance, \
round(nvl(main_data.total_asset/10000,0),2) as total_asset, \
round(nvl(main_data.assure_debit_rate,0)*100,2) as assure_debit_rate, \
round(nvl(main_data.concentrate,0)*100,2) as concentrate, \
0.0 as profit_rate_y \
from ( \
  select customer_no from mtoi.cust_group_detail where cust_group_id = ''{0}'' \
) condition01 \
 left join \
  mtoi.dim_customer cust \
  on \
  condition01.customer_no=cust.customer_no \
 left join \
  (select * from mtoi.agg_cust_statistics where part_date = 20160101) \
  main_data on condition01.customer_no=main_data.customer_no
#\u7EF4\u4FDD\u6BD4\u4F8B
sel.hive.customer.ratio=\
select credit_assure_scale_level, \
     credit_assure_scale_level_name, \
     count(distinct a.customer_no) as cust_nums \
from (select customer_no \
     from mtoi.cust_group_detail \
     where part_group_id = ''{0}'' and part_date = '20160103') a \
left join (select customer_no, \
   credit_assure_scale_level, \
   credit_assure_scale_level_name \
   from mtoi.agg_cust_group_statistics_temp \
   where part_date = '20160101') b on a.customer_no=b.customer_no \
   where credit_assure_scale_level is not null \
   group by credit_assure_scale_level, \
   credit_assure_scale_level_name order by credit_assure_scale_level desc
#\u4ED3\u4F4D\u5206\u6790
sel.hive.customer.analyze=\
  select stock_hold_level, \
   stock_hold_level_name, \
   count(distinct a.customer_no) as cust_nums \
  from (select customer_no \
  from mtoi.cust_group_detail \
  where part_group_id = ''{0}'' and part_date = '20160103') a \
  left join (select customer_no, \
  stock_hold_level, \
  stock_hold_level_name \
  from mtoi.agg_cust_group_statistics_temp \
  where part_date = '20160101') b on a.customer_no=b.customer_no \
  where stock_hold_level is not null \
  group by stock_hold_level, \
  stock_hold_level_name order by stock_hold_level desc
#\u5E74\u5EA6\u6536\u76CA\u7387
sel.hive.customer.yield=\
select income_rate_level, \
  income_rate_level_name, \
  count(distinct a.customer_no) as cust_nums \
  from (select customer_no \
  from mtoi.cust_group_detail \
  where part_group_id = ''{0}'' and part_date = '20160103') a \
  left join (select customer_no, \
  income_rate_level, \
  income_rate_level_name \
  from mtoi.agg_cust_group_statistics_temp \
  where part_date = '20160101') b on a.customer_no=b.customer_no \
  where income_rate_level is not null \
  group by income_rate_level, \
  income_rate_level_name order by income_rate_level desc
#\u878D\u8D44\u7B49\u7EA7
sel.hive.customer.grade=\
  select fin_level, \
   fin_level_name, \
   count(distinct a.customer_no) as cust_nums \
   from (select customer_no \
   from mtoi.cust_group_detail \
   where part_group_id = ''{0}'' and part_date = '20160103') a \
   left join (select customer_no, \
   fin_level, \
   fin_level_name \
   from mtoi.agg_cust_group_statistics_temp \
   where part_date = '20160101') b on a.customer_no=b.customer_no \
   where fin_level is not null \
   group by fin_level, \
   fin_level_name order by fin_level desc
#\u8425\u4E1A\u90E8\u5206\u5E03
sel.hive.customer.department=\
  select province, \
    city, \
    address, \
    branch_no, \
    concat(branch_no,''\u8425\u4E1A\u90E8'') as branch_name, \
    count(distinct a.customer_no) as cust_nums, \
    sum(fin_slo_balance) as fin_slo_balance \
    from (select customer_no \
    from mtoi.cust_group_detail \
    where part_group_id = ''{0}'' and part_date = '20160103') a \
    left join (select customer_no, \
     branch_no, \
     province, \
     city, \
     address, \
     fin_slo_balance \
     from mtoi.agg_cust_group_statistics_temp \
     where part_date = '20160101') b on a.customer_no=b.customer_no \
     where province is not null \
     group by province, \
     city, \
     address, \
     branch_no, \
     concat(branch_no,''\u8425\u4E1A\u90E8'')
#\u884C\u4E1A\u504F\u597D
sel.hive.customer.preference=\
select industry_type, \
  count(distinct a.customer_no) as cust_nums \
  from (select customer_no \
  from mtoi.cust_group_detail \
  where part_group_id = ''{0}'' and part_date = '20160103') a \
  left join (select customer_no, \
  industry_type \
  from mtoi.agg_cust_group_statistics_temp \
  lateral view explode(split(stock_industry_type, '','')) type_view as industry_type \
  where part_date = '20160101') b on a.customer_no=b.customer_no \
  where industry_type is not null and industry_type !="" \
  group by industry_type order by industry_type desc