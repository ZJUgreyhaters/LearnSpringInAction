<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd



        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	<context:annotation-config/>
	<!--<context:component-scan base-package="com.quantchi.*.**" />-->
	<context:component-scan base-package="com.quantchi.customer.*"/>
	<context:component-scan base-package="com.quantchi.transport.*"/>
	<context:property-placeholder location="classpath:app.properties"/>
	<import resource="applicationContext-dataSource.xml" />
	<!--<import resource="applicationContext-transaction.xml" />
	<import resource="applicationContext-task.xml" />-->
	<import resource="applicationContext-hive.xml" />
	<context:component-scan base-package="com.quantchi"/>



	<bean name="messageSource"
		  class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages</value>
			</list>
		</property>
	</bean>

	<!--<bean name="jacksonMessageConverter"
		  class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>-->

	<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json; charset=UTF-8</value>
				<value>application/x-www-form-urlencoded; charset=UTF-8</value>
			</list>
		</property>
		<property name="objectMapper">
			<bean class="com.fasterxml.jackson.databind.ObjectMapper">
				<property name="serializationInclusion">
					<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="httpSolr" class="org.apache.solr.client.solrj.impl.HttpSolrClient">
		<constructor-arg index="0" value="${solr.url}"/>
		<property name="parser">
			<bean class="org.apache.solr.client.solrj.impl.XMLResponseParser"/>
		</property>
		<property name="connectionTimeout" value="500"/>
	</bean>

	<bean id="intelquery" class="com.quantchi.intelquery.intelQuery"></bean>

	<!-- define the SqlSessionFactory -->
	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:mappers/**/*.xml</value>
			</list>
		</property>
		<property name="typeAliasesPackage" value="cn.xuetao.common.data.entities" />
	</bean>-->

	<!-- 配置SessionFactory -->
	<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.quantchi.customer.pojo"></property>
		<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
	</bean>
	<!--&lt;!&ndash; 扫描mapper配置文件的地址 &ndash;&gt;-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.quantchi.customer.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

</beans>
